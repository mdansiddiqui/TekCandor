@using NohaFMS.Services.Security
@model ChequeDepositModel

@{
    //page title
    ViewBag.Title = T("ChequeClearing.EditItemDetails").Text;
    var permissionService = EngineContext.Current.Resolve<NohaFMS.Services.IPermissionService>();
    var allowCreate = permissionService.Authorize(StandardPermissionName.Monitoring_ChequeDeposit_Create);
    var allowRead = permissionService.Authorize(StandardPermissionName.Monitoring_ChequeDeposit_Read);
    var allowUpdate = permissionService.Authorize(StandardPermissionName.Monitoring_ChequeDeposit_Update);
    var allowDelete = permissionService.Authorize(StandardPermissionName.Monitoring_ChequeDeposit_Delete);
}
<style>
    * {
        box-sizing: border-box;
    }

    .img-zoom-container {
        position: relative;
    }

    .img-zoom-lens {
        position: absolute;
        border: 1px solid #d4d4d4;
        /*set the size of the lens:*/
        width: 40px;
        height: 40px;
    }

    .img-zoom-result {
        border: 1px solid #d4d4d4;
        /*set the size of the result div:*/
        width: 300px;
        height: 300px;
    }
</style>

@using (Html.BeginForm("Edit", "ChequeDeposit", FormMethod.Post, new { id = "ChequeDeposit-form" }))
{
    @Html.AntiForgeryToken()
    <div class="content-header clearfix">
        <h1 class="pull-left">
            <small><i class="fa fa-arrow-circle-left fa-padding"></i>@Html.ActionLink(T("Common.BackToList").Text, "CallBack")</small>
        </h1>
        @*
            <div class="pull-right">
                <button type="button" id="save" name="save" class="btn btn-primary@(allowCreate || allowUpdate ? "" : " none-display")" title="@T("Common.Save")">
                    <i class="fa fa-floppy-o"></i>
                </button>
                <button type="button" id="cancel" name="cancel" class="btn btn-primary@(Model.IsNew == true ? "" : " none-display")" title="@T("Common.Cancel")">
                    <i class="fa fa-ban"></i>
                </button>
                <button type="button" id="ChequeDeposit-delete" class="btn btn-primary@(allowDelete && Model.IsNew == false ? "" : " none-display")" title="@T("Common.Delete")">
                    <i class="fa fa-trash-o"></i>
                </button>
            </div>*@
    </div>
    <div id="validation-summary" class="validation-summary-errors" style="display:none">

    </div>
    @Html.Partial("_CreateOrUpdate", Model)
    <script src="~/Content/chosen_v1.8.7/chosen.jquery.min.js"></script>

    <link href="~/Content/chosen_v1.8.7/chosen.min.css" rel="stylesheet" />
    <script type="text/javascript">


        @*$("#btnSend").click(function () {
        alert("button click");
        e.preventDefault();

        var model = @Html.Raw(Json.Encode(Model))
        $.ajax({
            type: 'post',
            url: '@Url.Action("callback", "chequeDeposit")',
            data: JSON.stringify({ contact: model }),
            contentType: 'application/json; charset=utf-8',
            dataType: "json",
            success: function (data) {
                alert(data);
            }
        });
        });*@
        //$(document).ready(function () {
        //    $('#Date').datepicker({
        //        dateFormat: "dd/mm/yy",
        //        showStatus: true,
        //        showWeeks: true,
        //        currentText: 'Now',
        //        autoSize: true,
        //        gotoCurrent: true,
        //        showAnim: 'blind',
        //        highlightWeek: true
        //    });
        //});
          //               $(document).ready(function () {
          //  $(function () {



          //      $('#DateGroup .input-group.date').datepicker({
          //          todayBtn: "linked",
          //          keyboardNavigation: false,
          //          forceParse: false,
          //          calendarWeeks: true,
          //          autoclose: true,
          //          // format: 'dd/mm/yy',
          //          pickTime: false
          //      });
          //  });
          //});
        //$(function () {


        //    $("#newExpiry_date").keyup(function (e) {
        //        // $("#item_id").empty();
        //        debugger
        //        var token_no = $("#newExpiry_date").val();

        //        token_no.split()
        //        if (token_no.length == 2) {
        //            if (parseFloat(token_no) > 31) {
        //                alert("Date Formate is DDMMYY");
        //                return false;
        //            }
        //        }
        //    });
        //});

          //$(function ()
          //{

          //    $('#DateGroup .input-group.date').datepicker
          //        ({
          //          todayBtn: "linked",
          //          keyboardNavigation: false,
          //          forceParse: false,
          //          calendarWeeks: true,
          //          autoclose: true,
          //          // format: 'dd/mm/yy',
          //          pickTime: false
          //      });
          //  });
                    $(document).ready(function ()
                    {
                        $('#chequeDate').datepicker({
                            dateFormat: "dd/mm/yy",
                            showStatus: true,
                            showWeeks: true,
                            currentText: 'Now',
                            autoSize: true,
                            gotoCurrent: true,
                            showAnim: 'blind',
                            highlightWeek: true
                        });
                    });
        $(document).ready(function ()
        {
            //$('#DateGroup .input-group.date').datepicker({
            //        todayBtn: "linked",
            //        keyboardNavigation: false,
            //        forceParse: false,
            //        calendarWeeks: true,
            //        autoclose: true,
            //        // format: 'dd/mm/yy',
            //        pickTime: false
            //    });


            $("#Returnreasone").chosen({ width: "100%" });
            //$("#item_id").trigger("chosen:updated");

        });

        function changeImage() {
            var img = document.getElementById("image");
            img.src = "Content/images/sample-signature-card.jpg";
            return false;
        }
        function imageZoom(imgID, resultID) {
            var img, lens, result, cx, cy;
            img = document.getElementById(imgID);
            result = document.getElementById(resultID);
            /* Create lens: */
            lens = document.createElement("DIV");
            lens.setAttribute("class", "img-zoom-lens");
            /* Insert lens: */
            img.parentElement.insertBefore(lens, img);
            /* Calculate the ratio between result DIV and lens: */
            cx = result.offsetWidth / lens.offsetWidth;
            cy = result.offsetHeight / lens.offsetHeight;
            /* Set background properties for the result DIV */
            result.style.backgroundImage = "url('" + img.src + "')";
            result.style.backgroundSize = (img.width * cx) + "px " + (img.height * cy) + "px";
            /* Execute a function when someone moves the cursor over the image, or the lens: */
            lens.addEventListener("mousemove", moveLens);
            img.addEventListener("mousemove", moveLens);
            /* And also for touch screens: */
            lens.addEventListener("touchmove", moveLens);
            img.addEventListener("touchmove", moveLens);
            function moveLens(e) {
                var pos, x, y;
                /* Prevent any other actions that may occur when moving over the image */
                e.preventDefault();
                /* Get the cursor's x and y positions: */
                pos = getCursorPos(e);
                /* Calculate the position of the lens: */
                x = pos.x - (lens.offsetWidth / 2);
                y = pos.y - (lens.offsetHeight / 2);
                /* Prevent the lens from being positioned outside the image: */
                if (x > img.width - lens.offsetWidth) { x = img.width - lens.offsetWidth; }
                if (x < 0) { x = 0; }
                if (y > img.height - lens.offsetHeight) { y = img.height - lens.offsetHeight; }
                if (y < 0) { y = 0; }
                /* Set the position of the lens: */
                lens.style.left = x + "px";
                lens.style.top = y + "px";
                /* Display what the lens "sees": */
                result.style.backgroundPosition = "-" + (x * cx) + "px -" + (y * cy) + "px";
            }
            function getCursorPos(e) {
                var a, x = 0, y = 0;
                e = e || window.event;
                /* Get the x and y positions of the image: */
                a = img.getBoundingClientRect();
                /* Calculate the cursor's x and y coordinates, relative to the image: */
                x = e.pageX - a.left;
                y = e.pageY - a.top;
                /* Consider any page scrolling: */
                x = x - window.pageXOffset;
                y = y - window.pageYOffset;
                return { x: x, y: y };
            }
        }


        $(document).ready(function () {
            $("#save").click(function (e) {
                e.preventDefault();
                saveForm('ChequeDeposit-form', '@(Url.Action("CallBackEdit", "ChequeDeposit"))', toggleTabs);
            });

            $("#cancel").click(function (e) {
                e.preventDefault();
                $('#form').removeClass('dirty');
                BaseEam.Grid.deleteRow(null, @Model.Id, "@Url.Action("Cancel", "ChequeDeposit")", "",  "@Url.Action("List", "ChequeDeposit")", false);
            });

            $("#ChequeDeposit-delete").click(function (e) {
                e.preventDefault();
                BaseEam.Grid.deleteRow(null, @Model.Id, "@Url.Action("Delete", "ChequeDeposit")", "", "@Url.Action("List", "ChequeDeposit")", true);
            });
        });

    </script>
    <script>
        // Initiate zoom effect:
        imageZoom("myimage", "myresult");
    </script>
}
